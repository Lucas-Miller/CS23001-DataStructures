//
//
// File:        logentry.cpp  
//       
// Version:     1.0
// Date:        
// Author:      
//
// Description: Class implementation for a log entry.
//
//

////////////////////////////////////////////////////////////
#include <iostream>
#include <vector>

#include "string.hpp" 
#include "logentry.hpp"


std::ostream& Date::operator<<(std::ostream &out) {
    out << day << month <<  year;
    return out;
}


Date::Date(String temp) {
    day = temp.substr(0,2);
    month = temp.substr(3,7);
    String tempTwo = temp.substr(8,11);
    year = tempTwo.toInt();
}

std::ostream& Time::operator<<(std::ostream &out) {
    out << hour << minute << second;
    return out;
}


Time::Time(String t) {
    String temp = t.substr(13,14);
    hour = temp.toInt();
    String min = t.substr(16,17);
    minute = min.toInt();
    String sec = t.substr(19,20);
    second = sec.toInt();
}


std::ostream& operator<<(std::ostream &out, const LogEntry rhs) {
    out << rhs.getHost() << rhs.getDate() << rhs.getRequest() << rhs.getStatus() << std::endl;
    return out;
}



////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//
LogEntry::LogEntry(String s) {
    // ...
    std::vector<String> vec = s.split(' ');
    host = vec[0];
    date = vec[3];
    time = vec[3];
    request = (vec[5] + vec[6] + vec[7]);
    status = vec[8];

   
    String temp = vec[9].substr(0, vec[9].length());
    if(temp != '-')
        number_of_bytes = temp.toInt();
    else
        number_of_bytes = 0; 
}

////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//
std::vector<LogEntry> parse(std::istream& in) {
    std::vector<LogEntry> result;
    String temp;
    in >> temp;
    while(!in.eof()){
        result.push_back(temp);
        in >> temp;
    }

    return result;
}

////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//
void output_all(std::ostream& out, const std::vector<LogEntry> &rhs) {
    for(int i = 0; i < int(rhs.size()); ++i){
        out << rhs[i].getHost();
    }     
}

////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//
void by_host(std::ostream& out, const std::vector<LogEntry>& rhs) {
    for(int i = 0; i < int(rhs.size()); ++i)
        out << rhs[i].getHost() << std::endl;
}

////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//
int byte_count(const std::vector<LogEntry> &rhs) {
    int result = 0;
    for(int i = 0; i < int(rhs.size()); ++i)
        result += rhs[i].getNumOfBytes();
    return result;    
}

